Index: Source/WebCore/platform/graphics/GLContext.cpp
===================================================================
--- Source/WebCore/platform/graphics/GLContext.cpp	(revision 182782)
+++ Source/WebCore/platform/graphics/GLContext.cpp	(working copy)
@@ -27,17 +27,16 @@
 #include "GLContextGLX.h"
 #endif
 
+#include <wtf/NeverDestroyed.h>
 #include <wtf/ThreadSpecific.h>
 
 #if PLATFORM(X11)
 #include <X11/Xlib.h>
 #endif
 
-#if PLATFORM(GTK)
-#include <gdk/gdk.h>
-#if PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2) && defined(GDK_WINDOWING_WAYLAND)
-#include <gdk/gdkwayland.h>
-#endif
+#if PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+#include "GtkUtilities.h"
+#include "WaylandDisplay.h"
 #endif
 
 using WTF::ThreadSpecific;
@@ -66,8 +65,18 @@ inline ThreadGlobalGLContext* currentCon
 
 GLContext* GLContext::sharingContext()
 {
-    DEPRECATED_DEFINE_STATIC_LOCAL(std::unique_ptr<GLContext>, sharing, (createOffscreenContext()));
-    return sharing.get();
+    static LazyNeverDestroyed<std::unique_ptr<GLContext>> sharingContext;
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+#if PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+        if (getDisplaySystemType() == DisplaySystemType::Wayland && WaylandDisplay::instance())
+            sharingContext.construct(WaylandDisplay::instance()->createSharingGLContext());
+        else
+#endif
+            sharingContext.construct(createOffscreenContext());
+    });
+
+    return sharingContext.get().get();
 }
 
 #if PLATFORM(X11)
@@ -142,16 +151,6 @@ void GLContext::cleanupActiveContextsAtE
 
 std::unique_ptr<GLContext> GLContext::createContextForWindow(GLNativeWindowType windowHandle, GLContext* sharingContext)
 {
-#if PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2) && defined(GDK_WINDOWING_WAYLAND) && USE(EGL)
-    GdkDisplay* display = gdk_display_manager_get_default_display(gdk_display_manager_get());
-
-    if (GDK_IS_WAYLAND_DISPLAY(display)) {
-        if (auto eglContext = GLContextEGL::createContext(windowHandle, sharingContext))
-            return WTF::move(eglContext);
-        return nullptr;
-    }
-#endif
-
 #if USE(GLX)
     if (auto glxContext = GLContextGLX::createContext(windowHandle, sharingContext))
         return WTF::move(glxContext);
Index: Source/WebCore/platform/graphics/GLContext.h
===================================================================
--- Source/WebCore/platform/graphics/GLContext.h	(revision 182782)
+++ Source/WebCore/platform/graphics/GLContext.h	(working copy)
@@ -27,6 +27,10 @@
 #if USE(EGL) && !PLATFORM(GTK)
 #include "eglplatform.h"
 typedef EGLNativeWindowType GLNativeWindowType;
+#elif PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+#include <wayland-egl.h>
+#include <EGL/eglplatform.h>
+typedef EGLNativeWindowType GLNativeWindowType;
 #else
 typedef uint64_t GLNativeWindowType;
 #endif
