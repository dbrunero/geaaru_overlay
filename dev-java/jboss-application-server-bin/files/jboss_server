#!/sbin/runscript
# Copyright 1999-2008 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: v 0.1 2008/07/06 22:51:00 geaaru Exp $

opts="${opts} forcestop zap"

depend() {
	use logger net
}

init_env_vars() {

	JBOSS_ARGS=""

	if [ x"$jboss_home_dir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.home.dir=$jboss_home_dir"
	else
		eerror "You need to set jboss_home_dir on configure file" && exit 1
	fi

	if [ x"$jboss_home_url" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.home.url=$jboss_home_url"
	fi

	if [ x"$jboss_lib_url" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.lib.url=$jboss_lib_url"
	fi

	if [ x"$jboss_patch_url" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.patch.url=$jboss_patch_url"
	fi

	if [ x"$jboss_server_name" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.name=$jboss_server_name"
		JBOSS_SERVER_NAME="$jboss_server_name"
	else
		JBOSS_SERVER_NAME="default"
	fi

	if [ x"$jboss_server_base_dir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.base.dir=$jboss_server_base_dir"
	fi

	if [ x"$jboss_server_base_url" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.base.url=$jboss_server_base_url"
	fi

	if [ x"$jboss_server_home_dir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.home.dir=$jboss_server_home_dir"
	fi

	if [ x"$jboss_server_home_url" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.home.url=$jboss_server_home_url"
	fi

	if [ x"$jboss_server_temp_dir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.temp.dir=$jboss_server_temp_dir"
	fi

	if [ x"$jboss_server_data_dir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.data.dir=$jboss_server_data_dir"
	fi

	if [ x"$jboss_server_config_url" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.config.url=$jboss_server_config_url"
	fi

	if [ x"$jboss_server_lib_url" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.lib.url=$jboss_server_lib_url"
	fi

	if [ x"$jboss_server_log_dir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.log.dir=$jboss_server_log_dir"
	fi

	if [ x"$jboss_bind_address" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.bind.address=$jboss_bind_address"
	fi

	if [ x"$jboss_partition_name" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.partition.name=$jboss_partition_name"
	fi

	if [ x"$jboss_partition_udpGroup" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.partition.udpGroup=$jboss_partition_udpGroup"
	fi

	if [ x"$jboss_server_exitonshutdown" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.exitonshutdown=$jboss_server_exitonshutdown"
	fi

	if [ x"$jboss_server_blockingshutdown" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.blockingshutdown=$jboss_server_blockingshutdown"
	fi

	if [ x"$jboss_server_requirejbossurlstreamhandler" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.requirejbossurlstreamhandlerfactory=$jboss_server_requirejbossurlstreamhandler"
	fi

	if [ x"$jboss_server_temp_dir_overridejavatmpdir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.temp.dir.overrideJavaTmpDir=$jboss_server_temp_dir_overridejavatmpdir"
	fi

	if [ x"$jboss_shutdown_forceHalt" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.shutdown.forceHalt=$jboss_shutdown_forceHalt"
	fi

	if [ x"$jboss_native_load" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.native.load=$jboss_native_load"
	fi

	if [ x"$jboss_native_dir" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.native.dir=$jboss_native_dir"
	fi

	if [ x"$jboss_server_type" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.type=$jboss_server_type"
	fi

	if [ x"$jboss_server_root_deployment_filename" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.server.root.deployment.filename=$jboss_server_root_deployment_filename"
	fi

	if [ x"$jboss_boot_library_list" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djboss.boot.library.list=$jboss_boot_library_list"
	fi

	if [ x"$log4j_configuration" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Dlog4j.configuration=$log4j_configuration"
	fi

	if [ x"$java_options" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS $java_options"
	fi

	if [ x"$java_xms_opt" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Xms$java_xms_opt"
	else
		JBOSS_ARGS="$JBOSS_ARGS -Xms128m"
	fi

	if [ x"$java_xmx_opt" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Xmx$java_xmx_opt"
	else
		JBOSS_ARGS="$JBOSS_ARGS -Xmx512m"
	fi

	if [ x"$java_dgc_client_gcInterval" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Dsun.rmi.dgc.client.gcInterval=$java_dgc_client_gcInterval"
	else
		JBOSS_ARGS="$JBOSS_ARGS -Dsun.rmi.dgc.client.gcInterval=3600000"
	fi

	if [ x"$java_dgc_server_gcInterval" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Dsun.rmi.dgc.server.gcInterval=$java_dgc_server_gcInterval"
	else
		JBOSS_ARGS="$JBOSS_ARGS -Dsun.rmi.dgc.server.gcInterval=3600000"
	fi

	if [ x"$java_force_ipv4" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djava.net.preferIPv4Stack=$java_force_ipv4"
	else
		JBOSS_ARGS="$JBOSS_ARGS -Djava.net.preferIPv4Stack=true"
	fi

	if [ x"$java_endorsed_dirs" != x ]; then
		JBOSS_ARGS="$JBOSS_ARGS -Djava.endorsed.dirs=$java_endorsed_dirs"
	else
		JBOSS_ARGS="$JBOSS_ARGS -Djava.endorsed.dirs=$jboss_home_dir/lib/endorsed"
	fi

	local MAX_FD_LIMIT=`ulimit -H -n`
	local MAX_FD=""
	if [ $? -eq 0 ]; then
		if [ x"$max_fd" != x ]; then
			if [ "$max_fd" = "maximun" ]; then
				MAX_FD="$MAX_FD_LIMIT"
			else
				MAX_FD="$max_fd"
			fi
			ulimit -n $MAX_FD
			if [ $? -ne 0 ]; then
				echo "Could not set maximun file description limit: $MAX_FD"
			fi
		fi
	fi

	# Populate JAVA_HOME
	if [ x"$java_home_dir" != x ]; then
		JAVA_HOME="$java_home_dir"
	else
		JAVA_HOME=`java-config --jre-home`
	fi

	if [ x"$java_vm" != x ]; then
		JAVA="$java_vm"
	else
		JAVA="$JAVA_HOME/bin/java"
	fi

	if [ x"$jboss_user" != x ]; then
		JBOSS_USER="$jboss_user"
	else
		JBOSS_USER="jboss"
	fi

	if [ x"$jboss_group" != x ]; then
		JBOSS_GROUP="$jboss_group"
	else
		JBOSS_GROUP="jboss"
	fi

	# Check for -server flags
	# If -server not set in JAVA_OPTS, set it, if supported
	local SERVER_SET=`echo $JBOSS_ARGS | grep " -server"`
	if [ "x$SERVER_SET" = "x" ]; then
		# Check for SUN(tm) JVM w/ HotSpot support
		if [ "x$HAS_HOTSPOT" = "x" ]; then
			HAS_HOTSPOT=`$JAVA -version 2>&1 | grep -i HotSpot`
		fi

		# Enable -server if we have Hotspot, unless we can't
		if [ "x$HAS_HOTSPOT" != "x" ]; then
			JBOSS_ARGS="$JBOSS_ARGS -server"
		fi
	fi

	# Setup classpath
	local runjar="$jboss_home_dir/bin/run.jar"
	if [ ! -f "$runjar" ]; then
		eerror "Missing required file: $runjar"
		exit 1
	fi

	# Tomcat uses the JDT Compiler
	# Only include tools.jar if someone wants to use the JDK instead.
	# compatible distribution which JAVA_HOME points to
	if [ "x$JAVAC_JAR" = "x" ]; then
			JAVAC_JAR_FILE="$JAVA_HOME/lib/tools.jar"
	else
			JAVAC_JAR_FILE="$JAVAC_JAR"
	fi

	local JBOSS_BOOT_CLASSPATH="$runjar:$JAVAC_JAR_FILE"

	# Set boot classpath
	JBOSS_ARGS="$JBOSS_ARGS -classpath $JBOSS_BOOT_CLASSPATH"
	# Set main class to execute
  # Add temporary --host param because define jboss.bind.address seems that
  # doesn't work.
	JBOSS_ARGS="$JBOSS_ARGS org.jboss.Main --host $jboss_bind_address"


	export JAVA_HOME JAVA JBOSS_ARGS JBOSS_USER JBOSS_GROUP JBOSS_SERVER_NAME

	# See because doesn't work without this
	RC_QUIET_STDOUT="no"
	export RC_QUIET_STDOUT

}

init_shutdown_env() {
	local JBOSS_BOOT_CLASSPATH="$jboss_home_dir/bin/shutdown.jar:$jboss_home_dir/client/jbossall-client.jar"

	JBOSS_SHUTDOWN_ARGS="-classpath $JBOSS_BOOT_CLASSPATH org.jboss.Shutdown -S"

	export JBOSS_SHUTDOWN_ARGS
}

start() {
	init_env_vars

	ebegin "Starting JBoss Application Server: ${JBOSS_SERVER_NAME}"
	if [ -e "/var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid" ]; then
		eerror "A server already exist"
		return 1
	fi

	local arguments="--start \
			--chuid ${JBOSS_USER}:${JBOSS_GROUP} \
			--make-pidfile --pidfile /var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid"

	einfo "$JAVA $JBOSS_ARGS"
	start-stop-daemon -b ${arguments} --exec ${JAVA} -- ${JBOSS_ARGS}> /dev/null 2>&1
	result=$?

	sleep 5
	# TODO: see if it is needed
	#local JBOSS_PID=`cat /var/run/jboss/jboss_${JBOSS_SERVER_NAME}.pid`
	# Trap common signals and relay them to the jboss process
	#trap "kill -HUP  $JBOSS_PID" HUP
	#trap "kill -TERM $JBOSS_PID" INT
	#trap "kill -QUIT $JBOSS_PID" QUIT
	#trap "kill -PIPE $JBOSS_PID" PIPE
	#trap "kill -TERM $JBOSS_PID" TERM
	eend $result
}

forcestop() {
	init_env_vars
	init_shutdown_env

	ebegin "Stopping JBoss Application Server: $JBOSS_SERVER_NAME"
	local arguments="--stop --pidfile \
			/var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid"

	start-stop-daemon ${arguments} --exec ${JAVA} -- ${JBOSS_SHUTDOWN_ARGS}
	local result=$?
	rm -f "/var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid"

  eend $result
}

stop() {
	init_env_vars
	init_shutdown_env
	ebegin "Stopping JBoss Application Server: $JBOSS_SERVER_NAME"

	local arguments="--stop \
		--make-pidfile \
		--pidfile /var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid"

	#start-stop-daemon ${arguments} --exec ${JAVA} -- ${JBOSS_ARGS}
	#kill -TERM `cat /var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid`
	start-stop-daemon ${arguments} --exec ${JAVA} -- ${JBOSS_SHUTDOWN_ARGS}
	local result=$?
	rm -f "/var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid"
	eend $result
}

zap() {
	init_env_vars
	ebegin "Zap JBoss Application Server: $JBOSS_SERVER_NAME"
	rm -f "/var/run/jboss/jboss_server.${JBOSS_SERVER_NAME}.pid"
	eend $?
}
